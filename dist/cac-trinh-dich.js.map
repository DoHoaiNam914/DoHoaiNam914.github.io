{"version":3,"file":"cac-trinh-dich.js","names":["Translators","DEEPL_TRANSLATE","GOOGLE_TRANSLATE","PAPAGO","MICROSOFT_TRANSLATOR","VIETPHRASE","DeepLTranslate","constructor","authKey","init","usage","fetchUsage","error","console","getSourceLangName","languageCode","SOURCE_LANGUAGES","filter","_ref","language","name","getTargetLangName","TARGET_LANGUAGES","_ref2","getMappedSourceLanguageCode","translator","_DeepLTranslate$GOOGL","GOOGLE_TRANSLATE_MAPPING","Object","prototype","hasOwnProperty","call","GoogleTranslate","DefaultLanguage","SL","_DeepLTranslate$PAPAG","PAPAGO_MAPPING","Papago","SOURCE","_DeepLTranslate$MICRO","MICROSOFT_TRANSLATOR_MAPPING","MicrosoftTranslator","FROM_LANGUAGES","FROM","Vietphrase","SOURCE_LANGUAGE","getMappedTargetLanguageCode","_DeepLTranslate$GOOGL2","TL","_DeepLTranslate$PAPAG2","TARGET","_DeepLTranslate$MICRO2","TO_LANGUAGES","TO","TARGET_LANGUAGE","$","ajax","method","url","concat","translateText","sourceLang","targetLang","text","Utils","convertHtmlToText","data","split","map","element","encodeURIComponent","join","translations","_class","_defineProperty","JSON","parse","SOURCE_LANG","DETECT_LANGUAGE","TARGET_LANG","BG","CS","DA","DE","EL","EN","ES","ET","FI","FR","HU","ID","IT","JA","KO","LT","LV","NL","PL","PT","RO","RU","SK","SV","UK","ZH","apiKey","fetchElementJsData","getSlName","getTlName","_GoogleTranslate$DEEP","DEEPL_TRANSLATOR_MAPPING","_ref3","length","_GoogleTranslate$MICR","_GoogleTranslate$DEEP2","_ref4","_GoogleTranslate$MICR2","elementJs","headers","CORS_PROXY","kq","match","_cac","_cam","v","sl","tl","q","lq","replace","includes","Oo","a","b","c","d","e","charCodeAt","jq","charAt","Number","toString","_class2","auto","ja","en","uuid","crypto","randomUUID","version","fetchVersion","getSourceName","getTargetName","_Papago$DEEPL_TRANSLA","_ref5","_Papago$GOOGLE_TRANSL","GOOGLE_TRANSLATOR_MAPPING","_Papago$MICROSOFT_TRA","_Papago$DEEPL_TRANSLA2","_ref6","_Papago$MICROSOFT_TRA2","mainJs","source","target","timeStamp","Date","getTime","Accept","Authorization","window","CryptoJS","HmacMD5","enc","Base64","Timestamp","translatedText","_class3","ko","es","fr","de","ru","pt","it","vi","th","id","hi","accessToken","fetchAccessToken","getFromName","startsWith","getToName","_MicrosoftTranslator$","_ref7","_MicrosoftTranslator$2","_MicrosoftTranslator$3","_MicrosoftTranslator$4","_ref8","_MicrosoftTranslator$5","_MicrosoftTranslator$6","dataType","from","to","stringify","Text","_ref9","_class4","_objectSpread","AUTODETECT","translationAlgorithm","multiplicationAlgorithm","isTtvTranslate","useGlossary","arguments","undefined","glossary","prioritizeNameOverVietphraseCheck","caseSensitive","PRIORITIZE_LONG_VIETPHRASE_CLUSTERS","TRANSLATE_FROM_LEFT_TO_RIGHT","NOT_APPLICABLE","MULTIPLICATION_BY_PRONOUNS","MULTIPLICATION_BY_PRONOUNS_AND_NAMES","prioritizeNameOverVietphrase","getSourceLanguageName","getTargetLanguageName","sourceLanugage","targetLanguage","inputText","pinyins","chinesePhienAmWords","vietphrases","TranslationAlgorithms","translateFromLeftToRight","translatePrioritizeLongVietphraseClusters","trim","dataEntries","entries","_ref10","first","glossaryEntries","result","luatnhanNameEntries","luatnhanPronounEntries","getLuatnhanData","maybePrioritizeNameOverVietphrase","sort","some","_ref11","index","array","key","value","test","indexOf","RegExp","getRegexEscapedText","values","getRegexEscapedReplacement","_ref12","getCaseSensitive","_ref13","lines","results","dataObj","fromEntries","forEach","chars","push","glossaryEntriesInLine","_ref14","second","dataLengths","_ref15","_ref16","_ref17","tempLine","prevPhrase","i","phrase","substring","_ref18","MultiplicationAlgorithm","cacLuatnhan","_ref19","_ref20","entriesKey","pronouns","_ref21","p1","p2","toUpperCase","zh","pinyin","sinoVietnamese"],"sources":["../static/js/dich-nhanh/cac-trinh-dich.js"],"sourcesContent":["/* global Utils */\nconst Translators = {\n  DEEPL_TRANSLATE: 'deeplTranslator',\n  GOOGLE_TRANSLATE: 'googleTranslate',\n  PAPAGO: 'papago',\n  MICROSOFT_TRANSLATOR: 'microsoftTranslator',\n  VIETPHRASE: 'vietphrase',\n};\n\nclass DeepLTranslate {\n  /** https://api-free.deepl.com/v2/languages?type=source */\n  static SOURCE_LANGUAGES = [{\n    language: '',\n    name: 'Detect language',\n  }, ...JSON.parse('[{\"language\":\"BG\",\"name\":\"Bulgarian\"},{\"language\":\"CS\",\"name\":\"Czech\"},{\"language\":\"DA\",\"name\":\"Danish\"},{\"language\":\"DE\",\"name\":\"German\"},{\"language\":\"EL\",\"name\":\"Greek\"},{\"language\":\"EN\",\"name\":\"English\"},{\"language\":\"ES\",\"name\":\"Spanish\"},{\"language\":\"ET\",\"name\":\"Estonian\"},{\"language\":\"FI\",\"name\":\"Finnish\"},{\"language\":\"FR\",\"name\":\"French\"},{\"language\":\"HU\",\"name\":\"Hungarian\"},{\"language\":\"ID\",\"name\":\"Indonesian\"},{\"language\":\"IT\",\"name\":\"Italian\"},{\"language\":\"JA\",\"name\":\"Japanese\"},{\"language\":\"KO\",\"name\":\"Korean\"},{\"language\":\"LT\",\"name\":\"Lithuanian\"},{\"language\":\"LV\",\"name\":\"Latvian\"},{\"language\":\"NB\",\"name\":\"Norwegian\"},{\"language\":\"NL\",\"name\":\"Dutch\"},{\"language\":\"PL\",\"name\":\"Polish\"},{\"language\":\"PT\",\"name\":\"Portuguese\"},{\"language\":\"RO\",\"name\":\"Romanian\"},{\"language\":\"RU\",\"name\":\"Russian\"},{\"language\":\"SK\",\"name\":\"Slovak\"},{\"language\":\"SL\",\"name\":\"Slovenian\"},{\"language\":\"SV\",\"name\":\"Swedish\"},{\"language\":\"TR\",\"name\":\"Turkish\"},{\"language\":\"UK\",\"name\":\"Ukrainian\"},{\"language\":\"ZH\",\"name\":\"Chinese\"}]')];\n\n  /** https://api-free.deepl.com/v2/languages?type=target */\n  static TARGET_LANGUAGES = JSON.parse('[{\"language\":\"BG\",\"name\":\"Bulgarian\",\"supports_formality\":false},{\"language\":\"CS\",\"name\":\"Czech\",\"supports_formality\":false},{\"language\":\"DA\",\"name\":\"Danish\",\"supports_formality\":false},{\"language\":\"DE\",\"name\":\"German\",\"supports_formality\":true},{\"language\":\"EL\",\"name\":\"Greek\",\"supports_formality\":false},{\"language\":\"EN-GB\",\"name\":\"English (British)\",\"supports_formality\":false},{\"language\":\"EN-US\",\"name\":\"English (American)\",\"supports_formality\":false},{\"language\":\"ES\",\"name\":\"Spanish\",\"supports_formality\":true},{\"language\":\"ET\",\"name\":\"Estonian\",\"supports_formality\":false},{\"language\":\"FI\",\"name\":\"Finnish\",\"supports_formality\":false},{\"language\":\"FR\",\"name\":\"French\",\"supports_formality\":true},{\"language\":\"HU\",\"name\":\"Hungarian\",\"supports_formality\":false},{\"language\":\"ID\",\"name\":\"Indonesian\",\"supports_formality\":false},{\"language\":\"IT\",\"name\":\"Italian\",\"supports_formality\":true},{\"language\":\"JA\",\"name\":\"Japanese\",\"supports_formality\":true},{\"language\":\"KO\",\"name\":\"Korean\",\"supports_formality\":false},{\"language\":\"LT\",\"name\":\"Lithuanian\",\"supports_formality\":false},{\"language\":\"LV\",\"name\":\"Latvian\",\"supports_formality\":false},{\"language\":\"NB\",\"name\":\"Norwegian\",\"supports_formality\":false},{\"language\":\"NL\",\"name\":\"Dutch\",\"supports_formality\":true},{\"language\":\"PL\",\"name\":\"Polish\",\"supports_formality\":true},{\"language\":\"PT-BR\",\"name\":\"Portuguese (Brazilian)\",\"supports_formality\":true},{\"language\":\"PT-PT\",\"name\":\"Portuguese (European)\",\"supports_formality\":true},{\"language\":\"RO\",\"name\":\"Romanian\",\"supports_formality\":false},{\"language\":\"RU\",\"name\":\"Russian\",\"supports_formality\":true},{\"language\":\"SK\",\"name\":\"Slovak\",\"supports_formality\":false},{\"language\":\"SL\",\"name\":\"Slovenian\",\"supports_formality\":false},{\"language\":\"SV\",\"name\":\"Swedish\",\"supports_formality\":false},{\"language\":\"TR\",\"name\":\"Turkish\",\"supports_formality\":false},{\"language\":\"UK\",\"name\":\"Ukrainian\",\"supports_formality\":false},{\"language\":\"ZH\",\"name\":\"Chinese (simplified)\",\"supports_formality\":false}]');\n\n  static DETECT_LANGUAGE = '';\n\n  static DefaultLanguage = {\n    SOURCE_LANG: DeepLTranslate.DETECT_LANGUAGE,\n    TARGET_LANG: 'EN-US',\n  };\n\n  static GOOGLE_TRANSLATE_MAPPING = {\n    '': 'auto',\n    BG: 'bg',\n    CS: 'cs',\n    DA: 'da',\n    DE: 'de',\n    EL: 'el',\n    EN: 'en',\n    'EN-GB': 'en',\n    'EN-US': 'en',\n    ES: 'es',\n    ET: 'et',\n    FI: 'fi',\n    FR: 'fr',\n    HU: 'hu',\n    ID: 'id',\n    IT: 'it',\n    JA: 'ja',\n    KO: 'ko',\n    LT: 'lt',\n    LV: 'lv',\n    NL: 'nl',\n    PL: 'pl',\n    PT: 'pt',\n    'PT-BR': 'pt',\n    'PT-PT': 'pt',\n    RO: 'ro',\n    RU: 'ru',\n    SK: 'sk',\n    SL: 'sl',\n    SV: 'sv',\n    UK: 'uk',\n    ZH: 'zh-CN',\n  };\n\n  static PAPAGO_MAPPING = {\n    '': 'auto',\n    DE: 'de',\n    EN: 'en',\n    'EN-GB': 'en',\n    'EN-US': 'en',\n    ES: 'es',\n    FR: 'fr',\n    IT: 'it',\n    JA: 'ja',\n    KO: 'ko',\n    PT: 'pt',\n    'PT-BR': 'pt',\n    'PT-PT': 'pt',\n    RU: 'ru',\n    ZH: 'zh-CN',\n  };\n\n  static MICROSOFT_TRANSLATOR_MAPPING = {\n    BG: 'bg',\n    CS: 'cs',\n    DA: 'da',\n    DE: 'de',\n    EL: 'el',\n    EN: 'en',\n    'EN-GB': 'en',\n    'EN-US': 'en',\n    ES: 'es',\n    ET: 'et',\n    FI: 'fi',\n    FR: 'fr',\n    HU: 'hu',\n    ID: 'id',\n    IT: 'it',\n    JA: 'ja',\n    KO: 'ko',\n    LT: 'lt',\n    LV: 'lv',\n    NL: 'nl',\n    PL: 'pl',\n    PT: 'pt',\n    'PT-BR': 'pt',\n    'PT-PT': 'pt-PT',\n    RO: 'ro',\n    RU: 'ru',\n    SK: 'sk',\n    SL: 'sl',\n    SV: 'sv',\n    UK: 'uk',\n    ZH: 'zh-CN',\n  };\n\n  constructor() {\n    this.authKey = 'a4b25ba2-b628-fa56-916e-b323b16502de:fx';\n  }\n\n  async init() {\n    try {\n      this.usage = await this.fetchUsage();\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n\n    return this;\n  }\n\n  static getSourceLangName(languageCode) {\n    return DeepLTranslate.SOURCE_LANGUAGES.filter(({ language }) => language === languageCode)[0].name;\n  }\n\n  static getTargetLangName(languageCode) {\n    return DeepLTranslate.TARGET_LANGUAGES.filter(({ language }) => language === languageCode)[0].name;\n  }\n\n  static getMappedSourceLanguageCode(translator, languageCode) {\n    switch (translator) {\n      case Translators.GOOGLE_TRANSLATE: {\n        return DeepLTranslate.GOOGLE_TRANSLATE_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(GoogleTranslate.SOURCE_LANGUAGES, languageCode) ? languageCode : GoogleTranslate.DefaultLanguage.SL);\n      }\n      case Translators.PAPAGO: {\n        return DeepLTranslate.PAPAGO_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(Papago.SOURCE_LANGUAGES, languageCode) ? languageCode : Papago.DefaultLanguage.SOURCE);\n      }\n      case Translators.MICROSOFT_TRANSLATOR: {\n        return DeepLTranslate.MICROSOFT_TRANSLATOR_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(MicrosoftTranslator.FROM_LANGUAGES, languageCode) ? languageCode : MicrosoftTranslator.DefaultLanguage.FROM);\n      }\n      case Translators.VIETPHRASE: {\n        return Vietphrase.DefaultLanguage.SOURCE_LANGUAGE;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static getMappedTargetLanguageCode(translator, languageCode) {\n    switch (translator) {\n      case Translators.GOOGLE_TRANSLATE: {\n        return DeepLTranslate.GOOGLE_TRANSLATE_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(GoogleTranslate.TARGET_LANGUAGES, languageCode) ? languageCode : GoogleTranslate.DefaultLanguage.TL);\n      }\n      case Translators.PAPAGO: {\n        return DeepLTranslate.PAPAGO_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(Papago.TARGET_LANGUAGES, languageCode) ? languageCode : Papago.DefaultLanguage.TARGET);\n      }\n      case Translators.MICROSOFT_TRANSLATOR: {\n        return DeepLTranslate.MICROSOFT_TRANSLATOR_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(MicrosoftTranslator.TO_LANGUAGES, languageCode) ? languageCode : MicrosoftTranslator.DefaultLanguage.TO);\n      }\n      case Translators.VIETPHRASE: {\n        return Vietphrase.DefaultLanguage.TARGET_LANGUAGE;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  async fetchUsage() {\n    try {\n      return await $.ajax({\n        method: 'GET',\n        url: `https://api-free.deepl.com/v2/usage?auth_key=${this.authKey}`,\n      });\n    } catch (error) {\n      console.error('Không thể lấy được Mức sử dụng:', error);\n      throw console.error('Không thể lấy được Mức sử dụng!');\n    }\n  }\n\n  async translateText(sourceLang, targetLang, text) {\n    try {\n      return Utils.convertHtmlToText((await $.ajax({\n        data: `text=${text.split(/\\n/)\n          .map((element) => encodeURIComponent(element))\n          .join('&text=')}&source_lang=${sourceLang}&target_lang=${targetLang}&tag_handling=xml`,\n        method: 'POST',\n        url: `https://api-free.deepl.com/v2/translate?auth_key=${this.authKey}`,\n      })).translations.map((element) => element.text)\n        .join('\\n'));\n    } catch (error) {\n      console.error('Bản dịch lỗi:', error);\n      throw error;\n    }\n  }\n}\n\nclass GoogleTranslate {\n  /** https://translate.googleapis.com/translate_a/l?client=chrome */\n  static SOURCE_LANGUAGES = JSON.parse('{\"auto\":\"Phát hiện ngôn ngữ\",\"ar\":\"Ả Rập\",\"sq\":\"Albania\",\"am\":\"Amharic\",\"en\":\"Anh\",\"hy\":\"Armenia\",\"as\":\"Assam\",\"ay\":\"Aymara\",\"az\":\"Azerbaijan\",\"pl\":\"Ba Lan\",\"fa\":\"Ba Tư\",\"bm\":\"Bambara\",\"xh\":\"Bantu\",\"eu\":\"Basque\",\"be\":\"Belarus\",\"bn\":\"Bengal\",\"bho\":\"Bhojpuri\",\"bs\":\"Bosnia\",\"pt\":\"Bồ Đào Nha\",\"bg\":\"Bulgaria\",\"ca\":\"Catalan\",\"ceb\":\"Cebuano\",\"ny\":\"Chichewa\",\"co\":\"Corsi\",\"ht\":\"Creole (Haiti)\",\"hr\":\"Croatia\",\"dv\":\"Dhivehi\",\"iw\":\"Do Thái\",\"doi\":\"Dogri\",\"da\":\"Đan Mạch\",\"de\":\"Đức\",\"et\":\"Estonia\",\"ee\":\"Ewe\",\"tl\":\"Filipino\",\"fy\":\"Frisia\",\"gd\":\"Gael Scotland\",\"gl\":\"Galicia\",\"ka\":\"George\",\"gn\":\"Guarani\",\"gu\":\"Gujarat\",\"nl\":\"Hà Lan\",\"af\":\"Hà Lan (Nam Phi)\",\"ko\":\"Hàn\",\"ha\":\"Hausa\",\"haw\":\"Hawaii\",\"hi\":\"Hindi\",\"hmn\":\"Hmong\",\"hu\":\"Hungary\",\"el\":\"Hy Lạp\",\"is\":\"Iceland\",\"ig\":\"Igbo\",\"ilo\":\"Ilocano\",\"id\":\"Indonesia\",\"ga\":\"Ireland\",\"jw\":\"Java\",\"kn\":\"Kannada\",\"kk\":\"Kazakh\",\"km\":\"Khmer\",\"rw\":\"Kinyarwanda\",\"gom\":\"Konkani\",\"kri\":\"Krio\",\"ku\":\"Kurd (Kurmanji)\",\"ckb\":\"Kurd (Sorani)\",\"ky\":\"Kyrgyz\",\"lo\":\"Lào\",\"la\":\"Latinh\",\"lv\":\"Latvia\",\"ln\":\"Lingala\",\"lt\":\"Litva\",\"lg\":\"Luganda\",\"lb\":\"Luxembourg\",\"ms\":\"Mã Lai\",\"mk\":\"Macedonia\",\"mai\":\"Maithili\",\"mg\":\"Malagasy\",\"ml\":\"Malayalam\",\"mt\":\"Malta\",\"mi\":\"Maori\",\"mr\":\"Marathi\",\"mni-Mtei\":\"Meiteilon (Manipuri)\",\"lus\":\"Mizo\",\"mn\":\"Mông Cổ\",\"my\":\"Myanmar\",\"no\":\"Na Uy\",\"ne\":\"Nepal\",\"ru\":\"Nga\",\"ja\":\"Nhật\",\"or\":\"Odia (Oriya)\",\"om\":\"Oromo\",\"ps\":\"Pashto\",\"sa\":\"Phạn\",\"fr\":\"Pháp\",\"fi\":\"Phần Lan\",\"pa\":\"Punjab\",\"qu\":\"Quechua\",\"eo\":\"Quốc tế ngữ\",\"ro\":\"Rumani\",\"sm\":\"Samoa\",\"cs\":\"Séc\",\"nso\":\"Sepedi\",\"sr\":\"Serbia\",\"st\":\"Sesotho\",\"sn\":\"Shona\",\"sd\":\"Sindhi\",\"si\":\"Sinhala\",\"sk\":\"Slovak\",\"sl\":\"Slovenia\",\"so\":\"Somali\",\"su\":\"Sunda\",\"sw\":\"Swahili\",\"tg\":\"Tajik\",\"ta\":\"Tamil\",\"tt\":\"Tatar\",\"es\":\"Tây Ban Nha\",\"te\":\"Telugu\",\"th\":\"Thái\",\"tr\":\"Thổ Nhĩ Kỳ\",\"sv\":\"Thụy Điển\",\"ti\":\"Tigrinya\",\"zh-CN\":\"Trung\",\"ts\":\"Tsonga\",\"tk\":\"Turkmen\",\"ak\":\"Twi\",\"uk\":\"Ukraina\",\"ur\":\"Urdu\",\"ug\":\"Uyghur\",\"uz\":\"Uzbek\",\"vi\":\"Việt\",\"cy\":\"Xứ Wales\",\"it\":\"Ý\",\"yi\":\"Yiddish\",\"yo\":\"Yoruba\",\"zu\":\"Zulu\"}');\n\n  static TARGET_LANGUAGES = JSON.parse('{\"ar\":\"Ả Rập\",\"sq\":\"Albania\",\"am\":\"Amharic\",\"en\":\"Anh\",\"hy\":\"Armenia\",\"as\":\"Assam\",\"ay\":\"Aymara\",\"az\":\"Azerbaijan\",\"pl\":\"Ba Lan\",\"fa\":\"Ba Tư\",\"bm\":\"Bambara\",\"xh\":\"Bantu\",\"eu\":\"Basque\",\"be\":\"Belarus\",\"bn\":\"Bengal\",\"bho\":\"Bhojpuri\",\"bs\":\"Bosnia\",\"pt\":\"Bồ Đào Nha\",\"bg\":\"Bulgaria\",\"ca\":\"Catalan\",\"ceb\":\"Cebuano\",\"ny\":\"Chichewa\",\"co\":\"Corsi\",\"ht\":\"Creole (Haiti)\",\"hr\":\"Croatia\",\"dv\":\"Dhivehi\",\"iw\":\"Do Thái\",\"doi\":\"Dogri\",\"da\":\"Đan Mạch\",\"de\":\"Đức\",\"et\":\"Estonia\",\"ee\":\"Ewe\",\"tl\":\"Filipino\",\"fy\":\"Frisia\",\"gd\":\"Gael Scotland\",\"gl\":\"Galicia\",\"ka\":\"George\",\"gn\":\"Guarani\",\"gu\":\"Gujarat\",\"nl\":\"Hà Lan\",\"af\":\"Hà Lan (Nam Phi)\",\"ko\":\"Hàn\",\"ha\":\"Hausa\",\"haw\":\"Hawaii\",\"hi\":\"Hindi\",\"hmn\":\"Hmong\",\"hu\":\"Hungary\",\"el\":\"Hy Lạp\",\"is\":\"Iceland\",\"ig\":\"Igbo\",\"ilo\":\"Ilocano\",\"id\":\"Indonesia\",\"ga\":\"Ireland\",\"jw\":\"Java\",\"kn\":\"Kannada\",\"kk\":\"Kazakh\",\"km\":\"Khmer\",\"rw\":\"Kinyarwanda\",\"gom\":\"Konkani\",\"kri\":\"Krio\",\"ku\":\"Kurd (Kurmanji)\",\"ckb\":\"Kurd (Sorani)\",\"ky\":\"Kyrgyz\",\"lo\":\"Lào\",\"la\":\"Latinh\",\"lv\":\"Latvia\",\"ln\":\"Lingala\",\"lt\":\"Litva\",\"lg\":\"Luganda\",\"lb\":\"Luxembourg\",\"ms\":\"Mã Lai\",\"mk\":\"Macedonia\",\"mai\":\"Maithili\",\"mg\":\"Malagasy\",\"ml\":\"Malayalam\",\"mt\":\"Malta\",\"mi\":\"Maori\",\"mr\":\"Marathi\",\"mni-Mtei\":\"Meiteilon (Manipuri)\",\"lus\":\"Mizo\",\"mn\":\"Mông Cổ\",\"my\":\"Myanmar\",\"no\":\"Na Uy\",\"ne\":\"Nepal\",\"ru\":\"Nga\",\"ja\":\"Nhật\",\"or\":\"Odia (Oriya)\",\"om\":\"Oromo\",\"ps\":\"Pashto\",\"sa\":\"Phạn\",\"fr\":\"Pháp\",\"fi\":\"Phần Lan\",\"pa\":\"Punjab\",\"qu\":\"Quechua\",\"eo\":\"Quốc tế ngữ\",\"ro\":\"Rumani\",\"sm\":\"Samoa\",\"cs\":\"Séc\",\"nso\":\"Sepedi\",\"sr\":\"Serbia\",\"st\":\"Sesotho\",\"sn\":\"Shona\",\"sd\":\"Sindhi\",\"si\":\"Sinhala\",\"sk\":\"Slovak\",\"sl\":\"Slovenia\",\"so\":\"Somali\",\"su\":\"Sunda\",\"sw\":\"Swahili\",\"tg\":\"Tajik\",\"ta\":\"Tamil\",\"tt\":\"Tatar\",\"es\":\"Tây Ban Nha\",\"te\":\"Telugu\",\"th\":\"Thái\",\"tr\":\"Thổ Nhĩ Kỳ\",\"sv\":\"Thụy Điển\",\"ti\":\"Tigrinya\",\"zh-CN\":\"Trung (Giản thể)\",\"zh-TW\":\"Trung (Phồn thể)\",\"ts\":\"Tsonga\",\"tk\":\"Turkmen\",\"ak\":\"Twi\",\"uk\":\"Ukraina\",\"ur\":\"Urdu\",\"ug\":\"Uyghur\",\"uz\":\"Uzbek\",\"vi\":\"Việt\",\"cy\":\"Xứ Wales\",\"it\":\"Ý\",\"yi\":\"Yiddish\",\"yo\":\"Yoruba\",\"zu\":\"Zulu\"}');\n\n  static DETECT_LANGUAGE = 'auto';\n\n  static DefaultLanguage = {\n    SL: GoogleTranslate.DETECT_LANGUAGE,\n    TL: 'vi',\n  };\n\n  static DEEPL_TRANSLATOR_MAPPING = {\n    SOURCE_LANGUAGES: {\n      auto: '',\n      ja: 'JA',\n      en: 'EN',\n      'zh-CN': 'ZH',\n    },\n    TARGET_LANGUAGES: {\n      ja: 'JA',\n      en: 'EN-US',\n      'zh-CN': 'ZH',\n      'zh-TW': 'ZH',\n    },\n  };\n\n  static MICROSOFT_TRANSLATOR_MAPPING = {\n    auto: '',\n    'zh-CN': 'zh-Hans',\n    'zh-TW': 'zh-Hant',\n  };\n\n  constructor() {\n    this.apiKey = 'AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw';\n  }\n\n  async init() {\n    try {\n      this.data = await this.fetchElementJsData();\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n\n    return this;\n  }\n\n  static getSlName(languageCode) {\n    return GoogleTranslate.SOURCE_LANGUAGES[languageCode];\n  }\n\n  static getTlName(languageCode) {\n    return GoogleTranslate.TARGET_LANGUAGES[languageCode];\n  }\n\n  static getMappedSourceLanguageCode(translator, languageCode) {\n    switch (translator) {\n      case Translators.DEEPL_TRANSLATE: {\n        return GoogleTranslate.DEEPL_TRANSLATOR_MAPPING.SOURCE_LANGUAGES[languageCode] ?? (DeepLTranslate.SOURCE_LANGUAGES.filter(({ language }) => language === languageCode).length > 0 ? languageCode : DeepLTranslate.DefaultLanguage.SOURCE_LANG);\n      }\n      case Translators.PAPAGO: {\n        return Object.prototype.hasOwnProperty.call(Papago.SOURCE_LANGUAGES, languageCode) ? languageCode : Papago.DefaultLanguage.SOURCE;\n      }\n      case Translators.MICROSOFT_TRANSLATOR: {\n        return GoogleTranslate.MICROSOFT_TRANSLATOR_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(MicrosoftTranslator.FROM_LANGUAGES, languageCode) ? languageCode : MicrosoftTranslator.DefaultLanguage.FROM);\n      }\n      case Translators.VIETPHRASE: {\n        return Vietphrase.DefaultLanguage.SOURCE_LANGUAGE;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static getMappedTargetLanguageCode(translator, languageCode) {\n    switch (translator) {\n      case Translators.DEEPL_TRANSLATE: {\n        return GoogleTranslate.DEEPL_TRANSLATOR_MAPPING.TARGET_LANGUAGES[languageCode] ?? (DeepLTranslate.TARGET_LANGUAGES.filter(({ language }) => language === languageCode).length > 0 ? languageCode : DeepLTranslate.DefaultLanguage.TARGET_LANG);\n      }\n      case Translators.PAPAGO: {\n        return Object.prototype.hasOwnProperty.call(Papago.TARGET_LANGUAGES, languageCode) ? languageCode : Papago.DefaultLanguage.TARGET;\n      }\n      case Translators.MICROSOFT_TRANSLATOR: {\n        return GoogleTranslate.MICROSOFT_TRANSLATOR_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(MicrosoftTranslator.TO_LANGUAGES, languageCode) ? languageCode : MicrosoftTranslator.DefaultLanguage.TO);\n      }\n      case Translators.VIETPHRASE: {\n        return Vietphrase.DefaultLanguage.TARGET_LANGUAGE;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  async fetchElementJsData() {\n    try {\n      /**\n       * Google translate Widget\n       * URL: //translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\n       *\n       * Google Translate Websites\n       * URL: https://translate.google.com/translate_a/element.js?cb=gtElInit&hl=vi&client=wt\n       *\n       * Google Chrome\n       * Method: GET\n       * URL: https://translate.googleapis.com/translate_a/element.js?cb=cr.googleTranslate.onTranslateElementLoad&aus=true&clc=cr.googleTranslate.onLoadCSS&jlc=cr.googleTranslate.onLoadJavascript&hl=vi&key=AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw\n       * Google-Translate-Element-Mode: library\n       */\n      const elementJs = await $.ajax({\n        headers: {\n          'Google-Translate-Element-Mode': 'library',\n        },\n        method: 'GET',\n        url: `${Utils.CORS_PROXY}https://translate.googleapis.com/translate_a/element.js?aus=true&hl=vi${this.apiKey.length > 0 ? `&key=${this.apiKey}` : ''}`,\n      });\n      this.kq = () => elementJs.match(/c\\._ctkk='(\\d+\\.\\d+)'/)[1];\n      // console.log(elementJs.match(/_loadJs\\('([^']+)'\\)/)[1]);\n      return {\n        _cac: elementJs.match(/c\\._cac='([a-z]*)'/)[1],\n        _cam: elementJs.match(/c\\._cam='([a-z]*)'/)[1],\n        v: elementJs.match(/_exportVersion\\('(TE_\\d+)'\\)/)[1],\n      };\n    } catch (error) {\n      console.error('Không thể lấy được Google Translate Element:', error);\n      throw console.error('Không thể lấy được Google Translate Element!');\n    }\n  }\n\n  async translateText(sl, tl, q) {\n    try {\n      /**\n       * Google translate Widget\n       * Method: POST\n       * URL: https://translate.googleapis.com/translate_a/t?anno=3&client=te&format=html&v=1.0&key&logld=v${version}&sl=${sl}&tl=${tl}&tc=0&tk=${lq(querys)}\n       * `q=${querys.split(/\\n/).map((sentence) => encodeURIComponent(sentence)).join('&q=')}`\n       *\n       * Google Translate\n       * Method: GET\n       * URL: https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sl}&tl=${tl}&hl=vi&dt=t&dt=bd&dj=1&q=${encodeURIComponent(querys)}\n       *\n       * Google Translate Websites\n       * Method: POST\n       * URL: https://translate.googleapis.com/translate_a/t?anno=3&client=wt_lib&format=html&v=1.0&key=&logld=v${version}&sl=${sl}&tl=${tl}&tc=0&tk=${lq(querys)}\n       * Content-Type: application/x-www-form-urlencoded - `q=${querys.split(/\\n/).map((sentence) => encodeURIComponent(sentence)).join('&q=')}`\n       *\n       * Google Chrome\n       * Method: POST\n       * URL: https://translate.googleapis.com/translate_a/t?anno=3&client=${(_cac || 'te') + (_cam === 'lib' ? '_lib' : '')}&format=html&v=1.0&key=AIzaSyBOti4mM-6x9WDnZIjIeyEU21OpBXqWBgw&logld=v${v || ''}&sl=${sl}&tl=${tl}&tc=0&tk=${lq(querys)}\n       * Content-Type: application/x-www-form-urlencoded - `q=${querys.split(/\\n/).map((sentence) => encodeURIComponent(sentence)).join('&q=')}`\n       */\n      return Utils.convertHtmlToText((await $.ajax({\n        data: `q=${q.split(/\\n/)\n          .map((element) => encodeURIComponent(element))\n          .join('&q=')}`,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        method: 'POST',\n        url: `https://translate.googleapis.com/translate_a/t?anno=3&client=${(this.data._cac || 'te') + (this.data._cam === 'lib' ? '_lib' : '')}&format=html&v=1.0&key${this.apiKey.length > 0 ? `=${this.apiKey}` : ''}&logld=v${this.data.v || ''}&sl=${sl}&tl=${tl}&tc=0&tk=${this.lq(q.replace(/\\n/g, ''))}`,\n      })).map((element) => (sl === 'auto' ? element[0] : element))\n        .map((element) => (element.includes('<i>') ? element.replace(/<i>(?:.(?!<\\/i>))+.(?=<\\/i>)<\\/i> <b>((?:.(?!<\\/b>))+.(?=<\\/b>))<\\/b>/g, '$1') : element))\n        .join('\\n'));\n    } catch (error) {\n      console.error('Bản dịch lỗi:', error);\n      throw error;\n    }\n  }\n\n  /* eslint-disable */\n\n  static Oo(a) {\n    for (var b = [], c = 0, d = 0; d < a.length; d++) {\n      var e = a.charCodeAt(d);\n      128 > e ? (b[c++] = e) : (2048 > e ? (b[c++] = (e >> 6) | 192) : (55296 === (e & 64512) && d + 1 < a.length && 56320 === (a.charCodeAt(d + 1) & 64512) ? ((e = 65536 + ((e & 1023) << 10) + (a.charCodeAt(++d) & 1023)), (b[c++] = (e >> 18) | 240), (b[c++] = ((e >> 12) & 63) | 128)) : (b[c++] = (e >> 12) | 224), (b[c++] = ((e >> 6) & 63) | 128)), (b[c++] = (e & 63) | 128));\n    }\n    return b;\n  }\n\n  static jq(a, b) {\n    for (var c = 0; c < b.length - 2; c += 3) {\n      var d = b.charAt(c + 2);\n      d = 'a' <= d ? d.charCodeAt(0) - 87 : Number(d);\n      d = '+' === b.charAt(c + 1) ? a >>> d : a << d;\n      a = '+' === b.charAt(c) ? (a + d) & 4294967295 : a ^ d;\n    }\n    return a;\n  }\n\n  lq(a) {\n    var b = this.kq()\n        .split('.'),\n      c = Number(b[0]) || 0;\n    a = GoogleTranslate.Oo(a);\n    for (var d = c, e = 0; e < a.length; e++) {\n      (d += a[e]), (d = GoogleTranslate.jq(d, '+-a^+6'));\n    }\n    d = GoogleTranslate.jq(d, '+-3^+b+-f');\n    d ^= Number(b[1]) || 0;\n    0 > d && (d = (d & 2147483647) + 2147483648);\n    b = d % 1e6;\n    return b.toString() + '.' + (b ^ c);\n  }\n\n  /* eslint-enable */\n}\n\nclass Papago {\n  static SOURCE_LANGUAGES = {\n    auto: 'Phát hiện ngôn ngữ',\n    ko: 'Hàn',\n    en: 'Anh',\n    ja: 'Nhật',\n    'zh-CN': 'Trung (Giản thể)',\n    'zh-TW': 'Trung (Phổn thể)',\n    es: 'Tây Ban Nha',\n    fr: 'Pháp',\n    de: 'Đức',\n    ru: 'Nga',\n    pt: 'Bồ Đào Nha',\n    it: 'Ý',\n    vi: 'Việt',\n    th: 'Thái',\n    id: 'Indonesia',\n    hi: 'Hindi',\n  };\n\n  static TARGET_LANGUAGES = {\n    ko: 'Hàn',\n    en: 'Anh',\n    ja: 'Nhật',\n    'zh-CN': 'Trung (Giản thể)',\n    'zh-TW': 'Trung (Phổn thể)',\n    es: 'Tây Ban Nha',\n    fr: 'Pháp',\n    de: 'Đức',\n    ru: 'Nga',\n    pt: 'Bồ Đào Nha',\n    it: 'Ý',\n    vi: 'Việt',\n    th: 'Thái',\n    id: 'Indonesia',\n    hi: 'Hindi',\n  };\n\n  static DETECT_LANGUAGE = 'auto';\n\n  static DefaultLanguage = {\n    SOURCE: Papago.DETECT_LANGUAGE,\n    TARGET: 'vi',\n  };\n\n  static DEEPL_TRANSLATOR_MAPPING = {\n    SOURCE_LANGUAGES: {\n      '': 'auto',\n      en: 'EN',\n      ja: 'JA',\n      'zh-CN': 'ZH',\n      'zh-TW': 'ZH',\n    },\n    TARGET_LANGUAGES: {\n      en: 'EN-US',\n      ja: 'JA',\n      'zh-CN': 'ZH',\n      'zh-TW': 'ZH',\n    },\n  };\n\n  static GOOGLE_TRANSLATOR_MAPPING = {\n    'zh-TW': 'zh-CN',\n  };\n\n  static MICROSOFT_TRANSLATOR_MAPPING = {\n    auto: '',\n    'zh-CN': 'zh-Hans',\n    'zh-TW': 'zh-Hant',\n  };\n\n  constructor() {\n    this.uuid = crypto.randomUUID();\n  }\n\n  async init() {\n    try {\n      this.version = await Papago.fetchVersion();\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n\n    return this;\n  }\n\n  static getSourceName(languageCode) {\n    return Papago.SOURCE_LANGUAGES[languageCode];\n  }\n\n  static getTargetName(languageCode) {\n    return Papago.TARGET_LANGUAGES[languageCode];\n  }\n\n  static getMappedSourceLanguageCode(translator, languageCode) {\n    switch (translator) {\n      case Translators.DEEPL_TRANSLATE: {\n        return Papago.DEEPL_TRANSLATOR_MAPPING.SOURCE_LANGUAGES[languageCode] ?? (DeepLTranslate.SOURCE_LANGUAGES.filter(({ language }) => language === languageCode).length > 0 ? languageCode : DeepLTranslate.DefaultLanguage.SOURCE_LANG);\n      }\n      case Translators.GOOGLE_TRANSLATE: {\n        return Papago.GOOGLE_TRANSLATOR_MAPPING[languageCode] ?? Object.prototype.hasOwnProperty.call(Papago.SOURCE_LANGUAGES, languageCode) ? languageCode : GoogleTranslate.DefaultLanguage.SL;\n      }\n      case Translators.MICROSOFT_TRANSLATOR: {\n        return Papago.MICROSOFT_TRANSLATOR_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(MicrosoftTranslator.FROM_LANGUAGES, languageCode) ? languageCode : MicrosoftTranslator.DefaultLanguage.FROM);\n      }\n      case Translators.VIETPHRASE: {\n        return Vietphrase.DefaultLanguage.SOURCE_LANGUAGE;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static getMappedTargetLanguageCode(translator, languageCode) {\n    switch (translator) {\n      case Translators.DEEPL_TRANSLATE: {\n        return Papago.DEEPL_TRANSLATOR_MAPPING.TARGET_LANGUAGES[languageCode] ?? (DeepLTranslate.TARGET_LANGUAGES.filter(({ language }) => language === languageCode).length > 0 ? languageCode : DeepLTranslate.DefaultLanguage.TARGET_LANG);\n      }\n      case Translators.GOOGLE_TRANSLATE: {\n        return Object.prototype.hasOwnProperty.call(Papago.TARGET_LANGUAGES, languageCode) ? languageCode : GoogleTranslate.DefaultLanguage.TL;\n      }\n      case Translators.MICROSOFT_TRANSLATOR: {\n        return Papago.MICROSOFT_TRANSLATOR_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(MicrosoftTranslator.TO_LANGUAGES, languageCode) ? languageCode : MicrosoftTranslator.DefaultLanguage.TO);\n      }\n      case Translators.VIETPHRASE: {\n        return Vietphrase.DefaultLanguage.TARGET_LANGUAGE;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static async fetchVersion() {\n    try {\n      const mainJs = (await $.ajax({\n        method: 'GET',\n        url: `${Utils.CORS_PROXY}https://papago.naver.com`,\n      })).match(/\\/(main.*\\.js)/)[1];\n      return (await $.ajax({\n        method: 'GET',\n        url: `${Utils.CORS_PROXY}https://papago.naver.com/${mainJs}`,\n      })).match(/\"PPG .*,\"(v[^\"]*)/)[1];\n    } catch (error) {\n      console.error('Không thể lấy được Thông tin phiên bản:', error);\n      throw console.error('Không thể lấy được Thông tin phiên bản!');\n    }\n  }\n\n  async translateText(source, target, text) {\n    try {\n      const timeStamp = (new Date()).getTime();\n\n      return (await $.ajax({\n        data: `deviceId=${this.uuid}&locale=vi&dict=true&dictDisplay=30&honorific=true&instant=false&paging=false&source=${source}&target=${target}&text=${encodeURIComponent(text)}`,\n        headers: {\n          Accept: 'application/json',\n          'Accept-Language': 'vi',\n          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', // 'device-type': 'pc',\n          // 'device-type': 'mobile',\n          'x-apigw-partnerid': 'papago', /* eslint-disable */\n\n          Authorization: 'PPG ' + this.uuid + ':' + window.CryptoJS.HmacMD5(this.uuid + '\\n' + 'https://papago.naver.com/apis/n2mt/translate' + '\\n' + timeStamp, this.version)\n            .toString(window.CryptoJS.enc.Base64),\n\n          /* eslint-enable */\n          Timestamp: timeStamp,\n        },\n        method: 'POST',\n        url: `${Utils.CORS_PROXY}https://papago.naver.com/apis/n2mt/translate`,\n      })).translatedText;\n    } catch (error) {\n      console.error('Bản dịch lỗi:', error);\n      throw error;\n    }\n  }\n}\n\nclass MicrosoftTranslator {\n  /** https://api.cognitive.microsofttranslator.com/languages?api-version=3.0 */\n  static FROM_LANGUAGES = {\n    '': { name: 'Tự phát hiện' }, ...JSON.parse('{\"af\":{\"name\":\"Tiếng Afrikaans\",\"nativeName\":\"Afrikaans\",\"dir\":\"ltr\"},\"am\":{\"name\":\"Tiếng Amharic\",\"nativeName\":\"አማርኛ\",\"dir\":\"ltr\"},\"ar\":{\"name\":\"Tiếng Ả Rập\",\"nativeName\":\"العربية\",\"dir\":\"rtl\"},\"as\":{\"name\":\"Tiếng Assam\",\"nativeName\":\"অসমীয়া\",\"dir\":\"ltr\"},\"az\":{\"name\":\"Tiếng Azerbaijan\",\"nativeName\":\"Azərbaycan\",\"dir\":\"ltr\"},\"ba\":{\"name\":\"Tiếng Bashkir\",\"nativeName\":\"Bashkir\",\"dir\":\"ltr\"},\"bg\":{\"name\":\"Tiếng Bulgaria\",\"nativeName\":\"Български\",\"dir\":\"ltr\"},\"bho\":{\"name\":\"Bhojpuri\",\"nativeName\":\"Bhojpuri\",\"dir\":\"ltr\"},\"bn\":{\"name\":\"Tiếng Bangla\",\"nativeName\":\"বাংলা\",\"dir\":\"ltr\"},\"bo\":{\"name\":\"Tiếng Tây Tạng\",\"nativeName\":\"བོད་སྐད་\",\"dir\":\"ltr\"},\"brx\":{\"name\":\"Bodo\",\"nativeName\":\"बड़ो\",\"dir\":\"ltr\"},\"bs\":{\"name\":\"Tiếng Bosnia\",\"nativeName\":\"Bosnian\",\"dir\":\"ltr\"},\"ca\":{\"name\":\"Tiếng Catalan\",\"nativeName\":\"Català\",\"dir\":\"ltr\"},\"cs\":{\"name\":\"Tiếng Séc\",\"nativeName\":\"Čeština\",\"dir\":\"ltr\"},\"cy\":{\"name\":\"Tiếng Wales\",\"nativeName\":\"Cymraeg\",\"dir\":\"ltr\"},\"da\":{\"name\":\"Tiếng Đan Mạch\",\"nativeName\":\"Dansk\",\"dir\":\"ltr\"},\"de\":{\"name\":\"Tiếng Đức\",\"nativeName\":\"Deutsch\",\"dir\":\"ltr\"},\"doi\":{\"name\":\"Dogri\",\"nativeName\":\"Dogri\",\"dir\":\"ltr\"},\"dsb\":{\"name\":\"Tiếng Hạ Sorbia\",\"nativeName\":\"Dolnoserbšćina\",\"dir\":\"ltr\"},\"dv\":{\"name\":\"Tiếng Divehi\",\"nativeName\":\"ދިވެހިބަސް\",\"dir\":\"rtl\"},\"el\":{\"name\":\"Tiếng Hy Lạp\",\"nativeName\":\"Ελληνικά\",\"dir\":\"ltr\"},\"en\":{\"name\":\"Tiếng Anh\",\"nativeName\":\"English\",\"dir\":\"ltr\"},\"es\":{\"name\":\"Tiếng Tây Ban Nha\",\"nativeName\":\"Español\",\"dir\":\"ltr\"},\"et\":{\"name\":\"Tiếng Estonia\",\"nativeName\":\"Eesti\",\"dir\":\"ltr\"},\"eu\":{\"name\":\"Tiếng Basque\",\"nativeName\":\"Euskara\",\"dir\":\"ltr\"},\"fa\":{\"name\":\"Tiếng Ba Tư\",\"nativeName\":\"فارسی\",\"dir\":\"rtl\"},\"fi\":{\"name\":\"Tiếng Phần Lan\",\"nativeName\":\"Suomi\",\"dir\":\"ltr\"},\"fil\":{\"name\":\"Tiếng Philippines\",\"nativeName\":\"Filipino\",\"dir\":\"ltr\"},\"fj\":{\"name\":\"Tiếng Fiji\",\"nativeName\":\"Na Vosa Vakaviti\",\"dir\":\"ltr\"},\"fo\":{\"name\":\"Tiếng Faroe\",\"nativeName\":\"Føroyskt\",\"dir\":\"ltr\"},\"fr\":{\"name\":\"Tiếng Pháp\",\"nativeName\":\"Français\",\"dir\":\"ltr\"},\"fr-CA\":{\"name\":\"Tiếng Pháp (Canada)\",\"nativeName\":\"Français (Canada)\",\"dir\":\"ltr\"},\"ga\":{\"name\":\"Tiếng Ireland\",\"nativeName\":\"Gaeilge\",\"dir\":\"ltr\"},\"gl\":{\"name\":\"Tiếng Galician\",\"nativeName\":\"Galego\",\"dir\":\"ltr\"},\"gom\":{\"name\":\"Konkani\",\"nativeName\":\"Konkani\",\"dir\":\"ltr\"},\"gu\":{\"name\":\"Tiếng Gujarati\",\"nativeName\":\"ગુજરાતી\",\"dir\":\"ltr\"},\"ha\":{\"name\":\"Tiếng Hausa\",\"nativeName\":\"Hausa\",\"dir\":\"ltr\"},\"he\":{\"name\":\"Tiếng Do Thái\",\"nativeName\":\"עברית\",\"dir\":\"rtl\"},\"hi\":{\"name\":\"Tiếng Hindi\",\"nativeName\":\"हिन्दी\",\"dir\":\"ltr\"},\"hr\":{\"name\":\"Tiếng Croatia\",\"nativeName\":\"Hrvatski\",\"dir\":\"ltr\"},\"hsb\":{\"name\":\"Tiếng Thượng Sorbia\",\"nativeName\":\"Hornjoserbšćina\",\"dir\":\"ltr\"},\"ht\":{\"name\":\"Tiếng Haiti\",\"nativeName\":\"Haitian Creole\",\"dir\":\"ltr\"},\"hu\":{\"name\":\"Tiếng Hungary\",\"nativeName\":\"Magyar\",\"dir\":\"ltr\"},\"hy\":{\"name\":\"Tiếng Armenia\",\"nativeName\":\"Հայերեն\",\"dir\":\"ltr\"},\"id\":{\"name\":\"Tiếng Indonesia\",\"nativeName\":\"Indonesia\",\"dir\":\"ltr\"},\"ig\":{\"name\":\"Tiếng Igbo\",\"nativeName\":\"Ásụ̀sụ́ Ìgbò\",\"dir\":\"ltr\"},\"ikt\":{\"name\":\"Inuinnaqtun\",\"nativeName\":\"Inuinnaqtun\",\"dir\":\"ltr\"},\"is\":{\"name\":\"Tiếng Iceland\",\"nativeName\":\"Íslenska\",\"dir\":\"ltr\"},\"it\":{\"name\":\"Tiếng Italy\",\"nativeName\":\"Italiano\",\"dir\":\"ltr\"},\"iu\":{\"name\":\"Tiếng Inuktitut\",\"nativeName\":\"ᐃᓄᒃᑎᑐᑦ\",\"dir\":\"ltr\"},\"iu-Latn\":{\"name\":\"Inuktitut (Latin)\",\"nativeName\":\"Inuktitut (Latin)\",\"dir\":\"ltr\"},\"ja\":{\"name\":\"Tiếng Nhật\",\"nativeName\":\"日本語\",\"dir\":\"ltr\"},\"ka\":{\"name\":\"Tiếng Georgia\",\"nativeName\":\"ქართული\",\"dir\":\"ltr\"},\"kk\":{\"name\":\"Tiếng Kazakh\",\"nativeName\":\"Қазақ Тілі\",\"dir\":\"ltr\"},\"km\":{\"name\":\"Tiếng Khmer\",\"nativeName\":\"ខ្មែរ\",\"dir\":\"ltr\"},\"kmr\":{\"name\":\"Tiếng Kurd (Bắc)\",\"nativeName\":\"Kurdî (Bakur)\",\"dir\":\"ltr\"},\"kn\":{\"name\":\"Tiếng Kannada\",\"nativeName\":\"ಕನ್ನಡ\",\"dir\":\"ltr\"},\"ko\":{\"name\":\"Tiếng Hàn\",\"nativeName\":\"한국어\",\"dir\":\"ltr\"},\"ks\":{\"name\":\"Kashmiri\",\"nativeName\":\"کٲشُر\",\"dir\":\"rtl\"},\"ku\":{\"name\":\"Tiếng Kurd (Trung)\",\"nativeName\":\"Kurdî (Navîn)\",\"dir\":\"rtl\"},\"ky\":{\"name\":\"Tiếng Kyrgyz\",\"nativeName\":\"Кыргызча\",\"dir\":\"ltr\"},\"ln\":{\"name\":\"Tiếng Lingala\",\"nativeName\":\"Lingála\",\"dir\":\"ltr\"},\"lo\":{\"name\":\"Tiếng Lào\",\"nativeName\":\"ລາວ\",\"dir\":\"ltr\"},\"lt\":{\"name\":\"Tiếng Litva\",\"nativeName\":\"Lietuvių\",\"dir\":\"ltr\"},\"lug\":{\"name\":\"Ganda\",\"nativeName\":\"Ganda\",\"dir\":\"ltr\"},\"lv\":{\"name\":\"Tiếng Latvia\",\"nativeName\":\"Latviešu\",\"dir\":\"ltr\"},\"lzh\":{\"name\":\"Chinese (Literary)\",\"nativeName\":\"中文 (文言文)\",\"dir\":\"ltr\"},\"mai\":{\"name\":\"Tiếng Maithili\",\"nativeName\":\"Maithili\",\"dir\":\"ltr\"},\"mg\":{\"name\":\"Tiếng Malagasy\",\"nativeName\":\"Malagasy\",\"dir\":\"ltr\"},\"mi\":{\"name\":\"Tiếng Maori\",\"nativeName\":\"Te Reo Māori\",\"dir\":\"ltr\"},\"mk\":{\"name\":\"Tiếng Macedonia\",\"nativeName\":\"Македонски\",\"dir\":\"ltr\"},\"ml\":{\"name\":\"Tiếng Malayalam\",\"nativeName\":\"മലയാളം\",\"dir\":\"ltr\"},\"mn-Cyrl\":{\"name\":\"Mongolian (Cyrillic)\",\"nativeName\":\"Mongolian (Cyrillic)\",\"dir\":\"ltr\"},\"mn-Mong\":{\"name\":\"Mongolian (Traditional)\",\"nativeName\":\"ᠮᠣᠩᠭᠣᠯ ᠬᠡᠯᠡ\",\"dir\":\"ltr\"},\"mr\":{\"name\":\"Tiếng Marathi\",\"nativeName\":\"मराठी\",\"dir\":\"ltr\"},\"ms\":{\"name\":\"Tiếng Mã Lai\",\"nativeName\":\"Melayu\",\"dir\":\"ltr\"},\"mt\":{\"name\":\"Tiếng Malta\",\"nativeName\":\"Malti\",\"dir\":\"ltr\"},\"mww\":{\"name\":\"Tiếng H’Mông\",\"nativeName\":\"Hmong Daw\",\"dir\":\"ltr\"},\"my\":{\"name\":\"Tiếng Miến Điện\",\"nativeName\":\"မြန်မာ\",\"dir\":\"ltr\"},\"nb\":{\"name\":\"Tiếng Na Uy (Bokmål)\",\"nativeName\":\"Norsk Bokmål\",\"dir\":\"ltr\"},\"ne\":{\"name\":\"Tiếng Nepal\",\"nativeName\":\"नेपाली\",\"dir\":\"ltr\"},\"nl\":{\"name\":\"Tiếng Hà Lan\",\"nativeName\":\"Nederlands\",\"dir\":\"ltr\"},\"nso\":{\"name\":\"Sesotho sa Leboa\",\"nativeName\":\"Sesotho sa Leboa\",\"dir\":\"ltr\"},\"nya\":{\"name\":\"Nyanja\",\"nativeName\":\"Nyanja\",\"dir\":\"ltr\"},\"or\":{\"name\":\"Tiếng Odia\",\"nativeName\":\"ଓଡ଼ିଆ\",\"dir\":\"ltr\"},\"otq\":{\"name\":\"Tiếng Querétaro Otomi\",\"nativeName\":\"Hñähñu\",\"dir\":\"ltr\"},\"pa\":{\"name\":\"Tiếng Punjab\",\"nativeName\":\"ਪੰਜਾਬੀ\",\"dir\":\"ltr\"},\"pl\":{\"name\":\"Tiếng Ba Lan\",\"nativeName\":\"Polski\",\"dir\":\"ltr\"},\"prs\":{\"name\":\"Tiếng Dari\",\"nativeName\":\"دری\",\"dir\":\"rtl\"},\"ps\":{\"name\":\"Tiếng Pashto\",\"nativeName\":\"پښتو\",\"dir\":\"rtl\"},\"pt\":{\"name\":\"Tiếng Bồ Đào Nha (Brazil)\",\"nativeName\":\"Português (Brasil)\",\"dir\":\"ltr\"},\"pt-PT\":{\"name\":\"Tiếng Bồ Đào Nha (Bồ Đào Nha)\",\"nativeName\":\"Português (Portugal)\",\"dir\":\"ltr\"},\"ro\":{\"name\":\"Tiếng Romania\",\"nativeName\":\"Română\",\"dir\":\"ltr\"},\"ru\":{\"name\":\"Tiếng Nga\",\"nativeName\":\"Русский\",\"dir\":\"ltr\"},\"run\":{\"name\":\"Rundi\",\"nativeName\":\"Rundi\",\"dir\":\"ltr\"},\"rw\":{\"name\":\"Tiếng Kinyarwanda\",\"nativeName\":\"Kinyarwanda\",\"dir\":\"ltr\"},\"sd\":{\"name\":\"Tiếng Sindhi\",\"nativeName\":\"سنڌي\",\"dir\":\"rtl\"},\"si\":{\"name\":\"Tiếng Sinhala\",\"nativeName\":\"සිංහල\",\"dir\":\"ltr\"},\"sk\":{\"name\":\"Tiếng Slovak\",\"nativeName\":\"Slovenčina\",\"dir\":\"ltr\"},\"sl\":{\"name\":\"Tiếng Slovenia\",\"nativeName\":\"Slovenščina\",\"dir\":\"ltr\"},\"sm\":{\"name\":\"Tiếng Samoa\",\"nativeName\":\"Gagana Sāmoa\",\"dir\":\"ltr\"},\"sn\":{\"name\":\"Tiếng Shona\",\"nativeName\":\"chiShona\",\"dir\":\"ltr\"},\"so\":{\"name\":\"Tiếng Somali\",\"nativeName\":\"Soomaali\",\"dir\":\"ltr\"},\"sq\":{\"name\":\"Tiếng Albania\",\"nativeName\":\"Shqip\",\"dir\":\"ltr\"},\"sr-Cyrl\":{\"name\":\"Tiếng Serbia (Chữ Kirin)\",\"nativeName\":\"Српски (ћирилица)\",\"dir\":\"ltr\"},\"sr-Latn\":{\"name\":\"Tiếng Serbia (Chữ La Tinh)\",\"nativeName\":\"Srpski (latinica)\",\"dir\":\"ltr\"},\"st\":{\"name\":\"Sesotho\",\"nativeName\":\"Sesotho\",\"dir\":\"ltr\"},\"sv\":{\"name\":\"Tiếng Thụy Điển\",\"nativeName\":\"Svenska\",\"dir\":\"ltr\"},\"sw\":{\"name\":\"Tiếng Swahili\",\"nativeName\":\"Kiswahili\",\"dir\":\"ltr\"},\"ta\":{\"name\":\"Tiếng Tamil\",\"nativeName\":\"தமிழ்\",\"dir\":\"ltr\"},\"te\":{\"name\":\"Tiếng Telugu\",\"nativeName\":\"తెలుగు\",\"dir\":\"ltr\"},\"th\":{\"name\":\"Tiếng Thái\",\"nativeName\":\"ไทย\",\"dir\":\"ltr\"},\"ti\":{\"name\":\"Tiếng Tigrinya\",\"nativeName\":\"ትግር\",\"dir\":\"ltr\"},\"tk\":{\"name\":\"Tiếng Turkmen\",\"nativeName\":\"Türkmen Dili\",\"dir\":\"ltr\"},\"tlh-Latn\":{\"name\":\"Tiếng Klingon (Chữ La Tinh)\",\"nativeName\":\"Klingon (Latin)\",\"dir\":\"ltr\"},\"tlh-Piqd\":{\"name\":\"Tiếng Klingon (pIqaD)\",\"nativeName\":\"Klingon (pIqaD)\",\"dir\":\"ltr\"},\"tn\":{\"name\":\"Setswana\",\"nativeName\":\"Setswana\",\"dir\":\"ltr\"},\"to\":{\"name\":\"Tiếng Tonga\",\"nativeName\":\"Lea Fakatonga\",\"dir\":\"ltr\"},\"tr\":{\"name\":\"Tiếng Thổ Nhĩ Kỳ\",\"nativeName\":\"Türkçe\",\"dir\":\"ltr\"},\"tt\":{\"name\":\"Tiếng Tatar\",\"nativeName\":\"Татар\",\"dir\":\"ltr\"},\"ty\":{\"name\":\"Tiếng Tahiti\",\"nativeName\":\"Reo Tahiti\",\"dir\":\"ltr\"},\"ug\":{\"name\":\"Tiếng Uyghur\",\"nativeName\":\"ئۇيغۇرچە\",\"dir\":\"rtl\"},\"uk\":{\"name\":\"Tiếng Ukraina\",\"nativeName\":\"Українська\",\"dir\":\"ltr\"},\"ur\":{\"name\":\"Tiếng Urdu\",\"nativeName\":\"اردو\",\"dir\":\"rtl\"},\"uz\":{\"name\":\"Tiếng Uzbek\",\"nativeName\":\"Uzbek (Latin)\",\"dir\":\"ltr\"},\"vi\":{\"name\":\"Tiếng Việt\",\"nativeName\":\"Tiếng Việt\",\"dir\":\"ltr\"},\"xh\":{\"name\":\"Tiếng Xhosa\",\"nativeName\":\"isiXhosa\",\"dir\":\"ltr\"},\"yo\":{\"name\":\"Tiếng Yoruba\",\"nativeName\":\"Èdè Yorùbá\",\"dir\":\"ltr\"},\"yua\":{\"name\":\"Tiếng Maya Yucatec\",\"nativeName\":\"Yucatec Maya\",\"dir\":\"ltr\"},\"yue\":{\"name\":\"Tiếng Quảng Đông (Phồn Thể)\",\"nativeName\":\"粵語 (繁體)\",\"dir\":\"ltr\"},\"zh-Hans\":{\"name\":\"Tiếng Trung (Giản Thể)\",\"nativeName\":\"中文 (简体)\",\"dir\":\"ltr\"},\"zh-Hant\":{\"name\":\"Tiếng Trung (Phồn Thể)\",\"nativeName\":\"繁體中文 (繁體)\",\"dir\":\"ltr\"},\"zu\":{\"name\":\"Tiếng Zulu\",\"nativeName\":\"Isi-Zulu\",\"dir\":\"ltr\"}}'),\n  };\n\n  static TO_LANGUAGES = JSON.parse('{\"af\":{\"name\":\"Tiếng Afrikaans\",\"nativeName\":\"Afrikaans\",\"dir\":\"ltr\"},\"am\":{\"name\":\"Tiếng Amharic\",\"nativeName\":\"አማርኛ\",\"dir\":\"ltr\"},\"ar\":{\"name\":\"Tiếng Ả Rập\",\"nativeName\":\"العربية\",\"dir\":\"rtl\"},\"as\":{\"name\":\"Tiếng Assam\",\"nativeName\":\"অসমীয়া\",\"dir\":\"ltr\"},\"az\":{\"name\":\"Tiếng Azerbaijan\",\"nativeName\":\"Azərbaycan\",\"dir\":\"ltr\"},\"ba\":{\"name\":\"Tiếng Bashkir\",\"nativeName\":\"Bashkir\",\"dir\":\"ltr\"},\"bg\":{\"name\":\"Tiếng Bulgaria\",\"nativeName\":\"Български\",\"dir\":\"ltr\"},\"bho\":{\"name\":\"Bhojpuri\",\"nativeName\":\"Bhojpuri\",\"dir\":\"ltr\"},\"bn\":{\"name\":\"Tiếng Bangla\",\"nativeName\":\"বাংলা\",\"dir\":\"ltr\"},\"bo\":{\"name\":\"Tiếng Tây Tạng\",\"nativeName\":\"བོད་སྐད་\",\"dir\":\"ltr\"},\"brx\":{\"name\":\"Bodo\",\"nativeName\":\"बड़ो\",\"dir\":\"ltr\"},\"bs\":{\"name\":\"Tiếng Bosnia\",\"nativeName\":\"Bosnian\",\"dir\":\"ltr\"},\"ca\":{\"name\":\"Tiếng Catalan\",\"nativeName\":\"Català\",\"dir\":\"ltr\"},\"cs\":{\"name\":\"Tiếng Séc\",\"nativeName\":\"Čeština\",\"dir\":\"ltr\"},\"cy\":{\"name\":\"Tiếng Wales\",\"nativeName\":\"Cymraeg\",\"dir\":\"ltr\"},\"da\":{\"name\":\"Tiếng Đan Mạch\",\"nativeName\":\"Dansk\",\"dir\":\"ltr\"},\"de\":{\"name\":\"Tiếng Đức\",\"nativeName\":\"Deutsch\",\"dir\":\"ltr\"},\"doi\":{\"name\":\"Dogri\",\"nativeName\":\"Dogri\",\"dir\":\"ltr\"},\"dsb\":{\"name\":\"Tiếng Hạ Sorbia\",\"nativeName\":\"Dolnoserbšćina\",\"dir\":\"ltr\"},\"dv\":{\"name\":\"Tiếng Divehi\",\"nativeName\":\"ދިވެހިބަސް\",\"dir\":\"rtl\"},\"el\":{\"name\":\"Tiếng Hy Lạp\",\"nativeName\":\"Ελληνικά\",\"dir\":\"ltr\"},\"en\":{\"name\":\"Tiếng Anh\",\"nativeName\":\"English\",\"dir\":\"ltr\"},\"es\":{\"name\":\"Tiếng Tây Ban Nha\",\"nativeName\":\"Español\",\"dir\":\"ltr\"},\"et\":{\"name\":\"Tiếng Estonia\",\"nativeName\":\"Eesti\",\"dir\":\"ltr\"},\"eu\":{\"name\":\"Tiếng Basque\",\"nativeName\":\"Euskara\",\"dir\":\"ltr\"},\"fa\":{\"name\":\"Tiếng Ba Tư\",\"nativeName\":\"فارسی\",\"dir\":\"rtl\"},\"fi\":{\"name\":\"Tiếng Phần Lan\",\"nativeName\":\"Suomi\",\"dir\":\"ltr\"},\"fil\":{\"name\":\"Tiếng Philippines\",\"nativeName\":\"Filipino\",\"dir\":\"ltr\"},\"fj\":{\"name\":\"Tiếng Fiji\",\"nativeName\":\"Na Vosa Vakaviti\",\"dir\":\"ltr\"},\"fo\":{\"name\":\"Tiếng Faroe\",\"nativeName\":\"Føroyskt\",\"dir\":\"ltr\"},\"fr\":{\"name\":\"Tiếng Pháp\",\"nativeName\":\"Français\",\"dir\":\"ltr\"},\"fr-CA\":{\"name\":\"Tiếng Pháp (Canada)\",\"nativeName\":\"Français (Canada)\",\"dir\":\"ltr\"},\"ga\":{\"name\":\"Tiếng Ireland\",\"nativeName\":\"Gaeilge\",\"dir\":\"ltr\"},\"gl\":{\"name\":\"Tiếng Galician\",\"nativeName\":\"Galego\",\"dir\":\"ltr\"},\"gom\":{\"name\":\"Konkani\",\"nativeName\":\"Konkani\",\"dir\":\"ltr\"},\"gu\":{\"name\":\"Tiếng Gujarati\",\"nativeName\":\"ગુજરાતી\",\"dir\":\"ltr\"},\"ha\":{\"name\":\"Tiếng Hausa\",\"nativeName\":\"Hausa\",\"dir\":\"ltr\"},\"he\":{\"name\":\"Tiếng Do Thái\",\"nativeName\":\"עברית\",\"dir\":\"rtl\"},\"hi\":{\"name\":\"Tiếng Hindi\",\"nativeName\":\"हिन्दी\",\"dir\":\"ltr\"},\"hr\":{\"name\":\"Tiếng Croatia\",\"nativeName\":\"Hrvatski\",\"dir\":\"ltr\"},\"hsb\":{\"name\":\"Tiếng Thượng Sorbia\",\"nativeName\":\"Hornjoserbšćina\",\"dir\":\"ltr\"},\"ht\":{\"name\":\"Tiếng Haiti\",\"nativeName\":\"Haitian Creole\",\"dir\":\"ltr\"},\"hu\":{\"name\":\"Tiếng Hungary\",\"nativeName\":\"Magyar\",\"dir\":\"ltr\"},\"hy\":{\"name\":\"Tiếng Armenia\",\"nativeName\":\"Հայերեն\",\"dir\":\"ltr\"},\"id\":{\"name\":\"Tiếng Indonesia\",\"nativeName\":\"Indonesia\",\"dir\":\"ltr\"},\"ig\":{\"name\":\"Tiếng Igbo\",\"nativeName\":\"Ásụ̀sụ́ Ìgbò\",\"dir\":\"ltr\"},\"ikt\":{\"name\":\"Inuinnaqtun\",\"nativeName\":\"Inuinnaqtun\",\"dir\":\"ltr\"},\"is\":{\"name\":\"Tiếng Iceland\",\"nativeName\":\"Íslenska\",\"dir\":\"ltr\"},\"it\":{\"name\":\"Tiếng Italy\",\"nativeName\":\"Italiano\",\"dir\":\"ltr\"},\"iu\":{\"name\":\"Tiếng Inuktitut\",\"nativeName\":\"ᐃᓄᒃᑎᑐᑦ\",\"dir\":\"ltr\"},\"iu-Latn\":{\"name\":\"Inuktitut (Latin)\",\"nativeName\":\"Inuktitut (Latin)\",\"dir\":\"ltr\"},\"ja\":{\"name\":\"Tiếng Nhật\",\"nativeName\":\"日本語\",\"dir\":\"ltr\"},\"ka\":{\"name\":\"Tiếng Georgia\",\"nativeName\":\"ქართული\",\"dir\":\"ltr\"},\"kk\":{\"name\":\"Tiếng Kazakh\",\"nativeName\":\"Қазақ Тілі\",\"dir\":\"ltr\"},\"km\":{\"name\":\"Tiếng Khmer\",\"nativeName\":\"ខ្មែរ\",\"dir\":\"ltr\"},\"kmr\":{\"name\":\"Tiếng Kurd (Bắc)\",\"nativeName\":\"Kurdî (Bakur)\",\"dir\":\"ltr\"},\"kn\":{\"name\":\"Tiếng Kannada\",\"nativeName\":\"ಕನ್ನಡ\",\"dir\":\"ltr\"},\"ko\":{\"name\":\"Tiếng Hàn\",\"nativeName\":\"한국어\",\"dir\":\"ltr\"},\"ks\":{\"name\":\"Kashmiri\",\"nativeName\":\"کٲشُر\",\"dir\":\"rtl\"},\"ku\":{\"name\":\"Tiếng Kurd (Trung)\",\"nativeName\":\"Kurdî (Navîn)\",\"dir\":\"rtl\"},\"ky\":{\"name\":\"Tiếng Kyrgyz\",\"nativeName\":\"Кыргызча\",\"dir\":\"ltr\"},\"ln\":{\"name\":\"Tiếng Lingala\",\"nativeName\":\"Lingála\",\"dir\":\"ltr\"},\"lo\":{\"name\":\"Tiếng Lào\",\"nativeName\":\"ລາວ\",\"dir\":\"ltr\"},\"lt\":{\"name\":\"Tiếng Litva\",\"nativeName\":\"Lietuvių\",\"dir\":\"ltr\"},\"lug\":{\"name\":\"Ganda\",\"nativeName\":\"Ganda\",\"dir\":\"ltr\"},\"lv\":{\"name\":\"Tiếng Latvia\",\"nativeName\":\"Latviešu\",\"dir\":\"ltr\"},\"lzh\":{\"name\":\"Chinese (Literary)\",\"nativeName\":\"中文 (文言文)\",\"dir\":\"ltr\"},\"mai\":{\"name\":\"Tiếng Maithili\",\"nativeName\":\"Maithili\",\"dir\":\"ltr\"},\"mg\":{\"name\":\"Tiếng Malagasy\",\"nativeName\":\"Malagasy\",\"dir\":\"ltr\"},\"mi\":{\"name\":\"Tiếng Maori\",\"nativeName\":\"Te Reo Māori\",\"dir\":\"ltr\"},\"mk\":{\"name\":\"Tiếng Macedonia\",\"nativeName\":\"Македонски\",\"dir\":\"ltr\"},\"ml\":{\"name\":\"Tiếng Malayalam\",\"nativeName\":\"മലയാളം\",\"dir\":\"ltr\"},\"mn-Cyrl\":{\"name\":\"Mongolian (Cyrillic)\",\"nativeName\":\"Mongolian (Cyrillic)\",\"dir\":\"ltr\"},\"mn-Mong\":{\"name\":\"Mongolian (Traditional)\",\"nativeName\":\"ᠮᠣᠩᠭᠣᠯ ᠬᠡᠯᠡ\",\"dir\":\"ltr\"},\"mr\":{\"name\":\"Tiếng Marathi\",\"nativeName\":\"मराठी\",\"dir\":\"ltr\"},\"ms\":{\"name\":\"Tiếng Mã Lai\",\"nativeName\":\"Melayu\",\"dir\":\"ltr\"},\"mt\":{\"name\":\"Tiếng Malta\",\"nativeName\":\"Malti\",\"dir\":\"ltr\"},\"mww\":{\"name\":\"Tiếng H’Mông\",\"nativeName\":\"Hmong Daw\",\"dir\":\"ltr\"},\"my\":{\"name\":\"Tiếng Miến Điện\",\"nativeName\":\"မြန်မာ\",\"dir\":\"ltr\"},\"nb\":{\"name\":\"Tiếng Na Uy (Bokmål)\",\"nativeName\":\"Norsk Bokmål\",\"dir\":\"ltr\"},\"ne\":{\"name\":\"Tiếng Nepal\",\"nativeName\":\"नेपाली\",\"dir\":\"ltr\"},\"nl\":{\"name\":\"Tiếng Hà Lan\",\"nativeName\":\"Nederlands\",\"dir\":\"ltr\"},\"nso\":{\"name\":\"Sesotho sa Leboa\",\"nativeName\":\"Sesotho sa Leboa\",\"dir\":\"ltr\"},\"nya\":{\"name\":\"Nyanja\",\"nativeName\":\"Nyanja\",\"dir\":\"ltr\"},\"or\":{\"name\":\"Tiếng Odia\",\"nativeName\":\"ଓଡ଼ିଆ\",\"dir\":\"ltr\"},\"otq\":{\"name\":\"Tiếng Querétaro Otomi\",\"nativeName\":\"Hñähñu\",\"dir\":\"ltr\"},\"pa\":{\"name\":\"Tiếng Punjab\",\"nativeName\":\"ਪੰਜਾਬੀ\",\"dir\":\"ltr\"},\"pl\":{\"name\":\"Tiếng Ba Lan\",\"nativeName\":\"Polski\",\"dir\":\"ltr\"},\"prs\":{\"name\":\"Tiếng Dari\",\"nativeName\":\"دری\",\"dir\":\"rtl\"},\"ps\":{\"name\":\"Tiếng Pashto\",\"nativeName\":\"پښتو\",\"dir\":\"rtl\"},\"pt\":{\"name\":\"Tiếng Bồ Đào Nha (Brazil)\",\"nativeName\":\"Português (Brasil)\",\"dir\":\"ltr\"},\"pt-PT\":{\"name\":\"Tiếng Bồ Đào Nha (Bồ Đào Nha)\",\"nativeName\":\"Português (Portugal)\",\"dir\":\"ltr\"},\"ro\":{\"name\":\"Tiếng Romania\",\"nativeName\":\"Română\",\"dir\":\"ltr\"},\"ru\":{\"name\":\"Tiếng Nga\",\"nativeName\":\"Русский\",\"dir\":\"ltr\"},\"run\":{\"name\":\"Rundi\",\"nativeName\":\"Rundi\",\"dir\":\"ltr\"},\"rw\":{\"name\":\"Tiếng Kinyarwanda\",\"nativeName\":\"Kinyarwanda\",\"dir\":\"ltr\"},\"sd\":{\"name\":\"Tiếng Sindhi\",\"nativeName\":\"سنڌي\",\"dir\":\"rtl\"},\"si\":{\"name\":\"Tiếng Sinhala\",\"nativeName\":\"සිංහල\",\"dir\":\"ltr\"},\"sk\":{\"name\":\"Tiếng Slovak\",\"nativeName\":\"Slovenčina\",\"dir\":\"ltr\"},\"sl\":{\"name\":\"Tiếng Slovenia\",\"nativeName\":\"Slovenščina\",\"dir\":\"ltr\"},\"sm\":{\"name\":\"Tiếng Samoa\",\"nativeName\":\"Gagana Sāmoa\",\"dir\":\"ltr\"},\"sn\":{\"name\":\"Tiếng Shona\",\"nativeName\":\"chiShona\",\"dir\":\"ltr\"},\"so\":{\"name\":\"Tiếng Somali\",\"nativeName\":\"Soomaali\",\"dir\":\"ltr\"},\"sq\":{\"name\":\"Tiếng Albania\",\"nativeName\":\"Shqip\",\"dir\":\"ltr\"},\"sr-Cyrl\":{\"name\":\"Tiếng Serbia (Chữ Kirin)\",\"nativeName\":\"Српски (ћирилица)\",\"dir\":\"ltr\"},\"sr-Latn\":{\"name\":\"Tiếng Serbia (Chữ La Tinh)\",\"nativeName\":\"Srpski (latinica)\",\"dir\":\"ltr\"},\"st\":{\"name\":\"Sesotho\",\"nativeName\":\"Sesotho\",\"dir\":\"ltr\"},\"sv\":{\"name\":\"Tiếng Thụy Điển\",\"nativeName\":\"Svenska\",\"dir\":\"ltr\"},\"sw\":{\"name\":\"Tiếng Swahili\",\"nativeName\":\"Kiswahili\",\"dir\":\"ltr\"},\"ta\":{\"name\":\"Tiếng Tamil\",\"nativeName\":\"தமிழ்\",\"dir\":\"ltr\"},\"te\":{\"name\":\"Tiếng Telugu\",\"nativeName\":\"తెలుగు\",\"dir\":\"ltr\"},\"th\":{\"name\":\"Tiếng Thái\",\"nativeName\":\"ไทย\",\"dir\":\"ltr\"},\"ti\":{\"name\":\"Tiếng Tigrinya\",\"nativeName\":\"ትግር\",\"dir\":\"ltr\"},\"tk\":{\"name\":\"Tiếng Turkmen\",\"nativeName\":\"Türkmen Dili\",\"dir\":\"ltr\"},\"tlh-Latn\":{\"name\":\"Tiếng Klingon (Chữ La Tinh)\",\"nativeName\":\"Klingon (Latin)\",\"dir\":\"ltr\"},\"tlh-Piqd\":{\"name\":\"Tiếng Klingon (pIqaD)\",\"nativeName\":\"Klingon (pIqaD)\",\"dir\":\"ltr\"},\"tn\":{\"name\":\"Setswana\",\"nativeName\":\"Setswana\",\"dir\":\"ltr\"},\"to\":{\"name\":\"Tiếng Tonga\",\"nativeName\":\"Lea Fakatonga\",\"dir\":\"ltr\"},\"tr\":{\"name\":\"Tiếng Thổ Nhĩ Kỳ\",\"nativeName\":\"Türkçe\",\"dir\":\"ltr\"},\"tt\":{\"name\":\"Tiếng Tatar\",\"nativeName\":\"Татар\",\"dir\":\"ltr\"},\"ty\":{\"name\":\"Tiếng Tahiti\",\"nativeName\":\"Reo Tahiti\",\"dir\":\"ltr\"},\"ug\":{\"name\":\"Tiếng Uyghur\",\"nativeName\":\"ئۇيغۇرچە\",\"dir\":\"rtl\"},\"uk\":{\"name\":\"Tiếng Ukraina\",\"nativeName\":\"Українська\",\"dir\":\"ltr\"},\"ur\":{\"name\":\"Tiếng Urdu\",\"nativeName\":\"اردو\",\"dir\":\"rtl\"},\"uz\":{\"name\":\"Tiếng Uzbek\",\"nativeName\":\"Uzbek (Latin)\",\"dir\":\"ltr\"},\"vi\":{\"name\":\"Tiếng Việt\",\"nativeName\":\"Tiếng Việt\",\"dir\":\"ltr\"},\"xh\":{\"name\":\"Tiếng Xhosa\",\"nativeName\":\"isiXhosa\",\"dir\":\"ltr\"},\"yo\":{\"name\":\"Tiếng Yoruba\",\"nativeName\":\"Èdè Yorùbá\",\"dir\":\"ltr\"},\"yua\":{\"name\":\"Tiếng Maya Yucatec\",\"nativeName\":\"Yucatec Maya\",\"dir\":\"ltr\"},\"yue\":{\"name\":\"Tiếng Quảng Đông (Phồn Thể)\",\"nativeName\":\"粵語 (繁體)\",\"dir\":\"ltr\"},\"zh-Hans\":{\"name\":\"Tiếng Trung (Giản Thể)\",\"nativeName\":\"中文 (简体)\",\"dir\":\"ltr\"},\"zh-Hant\":{\"name\":\"Tiếng Trung (Phồn Thể)\",\"nativeName\":\"繁體中文 (繁體)\",\"dir\":\"ltr\"},\"zu\":{\"name\":\"Tiếng Zulu\",\"nativeName\":\"Isi-Zulu\",\"dir\":\"ltr\"}}');\n\n  static AUTODETECT = '';\n\n  static DefaultLanguage = {\n    FROM: MicrosoftTranslator.AUTODETECT,\n    TO: 'vi',\n  };\n\n  static DEEPL_TRANSLATOR_MAPPING = {\n    SOURCE_LANGUAGES: {\n      en: 'EN',\n      ja: 'JA',\n      'zh-Hans': 'ZH',\n      'zh-Hant': 'ZH',\n    },\n    TARGET_LANGUAGES: {\n      en: 'EN-US',\n      ja: 'JA',\n      'zh-Hans': 'ZH',\n      'zh-Hant': 'ZH',\n    },\n  };\n\n  static GOOGLE_TRANSLATE_MAPPING = {\n    '': 'auto',\n    'zh-Hans': 'zh-CN',\n    'zh-Hant': 'zh-TW',\n  };\n\n  static PAPAGO_MAPPING = {\n    '': 'auto',\n    'zh-Hans': 'zh-CN',\n    'zh-Hant': 'zh-TW',\n  };\n\n  async init() {\n    try {\n      this.accessToken = await MicrosoftTranslator.fetchAccessToken();\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n\n    return this;\n  }\n\n  static getFromName(languageCode) {\n    return MicrosoftTranslator.FROM_LANGUAGES[languageCode].name.startsWith('Tiếng ') ? MicrosoftTranslator.FROM_LANGUAGES[languageCode].name.match(/Tiếng (.+)/)[1] : MicrosoftTranslator.FROM_LANGUAGES[languageCode].name;\n  }\n\n  static getToName(languageCode) {\n    return MicrosoftTranslator.TO_LANGUAGES[languageCode].name.startsWith('Tiếng ') ? MicrosoftTranslator.TO_LANGUAGES[languageCode].name.match(/Tiếng (.+)/)[1] : MicrosoftTranslator.TO_LANGUAGES[languageCode].name;\n  }\n\n  static getMappedSourceLanguageCode(translator, languageCode) {\n    switch (translator) {\n      case Translators.DEEPL_TRANSLATE: {\n        return MicrosoftTranslator.DEEPL_TRANSLATOR_MAPPING.SOURCE_LANGUAGES[languageCode] ?? (DeepLTranslate.SOURCE_LANGUAGES.filter(({ language }) => language === languageCode).length > 0 ? languageCode : DeepLTranslate.DefaultLanguage.SOURCE_LANG);\n      }\n      case Translators.GOOGLE_TRANSLATE: {\n        return MicrosoftTranslator.GOOGLE_TRANSLATE_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(GoogleTranslate.SOURCE_LANGUAGES, languageCode) ? languageCode : GoogleTranslate.DefaultLanguage.SL);\n      }\n      case Translators.PAPAGO: {\n        return MicrosoftTranslator.PAPAGO_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(Papago.SOURCE_LANGUAGES, languageCode) ? languageCode : Papago.DefaultLanguage.SOURCE);\n      }\n      case Translators.VIETPHRASE: {\n        return Vietphrase.DefaultLanguage.SOURCE_LANGUAGE;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static getMappedTargetLanguageCode(translator, languageCode) {\n    switch (translator) {\n      case Translators.DEEPL_TRANSLATE: {\n        return MicrosoftTranslator.DEEPL_TRANSLATOR_MAPPING.TARGET_LANGUAGES[languageCode] ?? (DeepLTranslate.TARGET_LANGUAGES.filter(({ language }) => language === languageCode).length > 0 ? languageCode : DeepLTranslate.DefaultLanguage.TARGET_LANG);\n      }\n      case Translators.GOOGLE_TRANSLATE: {\n        return MicrosoftTranslator.GOOGLE_TRANSLATE_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(GoogleTranslate.TARGET_LANGUAGES, languageCode) ? languageCode : GoogleTranslate.DefaultLanguage.TL);\n      }\n      case Translators.PAPAGO: {\n        return MicrosoftTranslator.PAPAGO_MAPPING[languageCode] ?? (Object.prototype.hasOwnProperty.call(Papago.TARGET_LANGUAGES, languageCode) ? languageCode : Papago.DefaultLanguage.TARGET);\n      }\n      case Translators.VIETPHRASE: {\n        return Vietphrase.DefaultLanguage.TARGET_LANGUAGE;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static async fetchAccessToken() {\n    try {\n      return await $.ajax({\n        dataType: 'text',\n        method: 'GET',\n        url: 'https://edge.microsoft.com/translate/auth',\n      });\n    } catch (error) {\n      console.error('Không thể lấy được Access Token:', error);\n      throw console.error('Không thể lấy được Access Token!');\n    }\n  }\n\n  async translateText(from, to, text) {\n    try {\n      /**\n       * Microsoft Bing Translator\n       * const bingTranslatorHTML = await $.get('https://cors-anywhere.herokuapp.com/https://www.bing.com/translator');\n       * const IG = bingTranslatorHTML.match(/IG:'([A-Z0-9]+)'/)[1];\n       * const IID = bingTranslatorHTML.match(/data-iid='(translator.\\d+)'/)[1];\n       * const [, key, token] = bingTranslatorHTML.match(/var params_AbusePreventionHelper\\s*=\\s*\\[([0-9]+),\\s*'([^']+)',[^\\]]*\\];/);\n       * Method: POST\n       * URL: https://www.bing.com/ttranslatev3?isVertical=1&&IG=76A5BF5FFF374A53A1374DE8089BDFF2&IID=translator.5029\n       * Content-type: application/x-www-form-urlencoded send(&fromLang=auto-detect&text=inputText&to=targetLanguage&token=kXtg8tfzQrA11KAJyMhp61NCVy-19gPj&key=1687667900500&tryFetchingGenderDebiasedTranslations=true)\n       *\n       * Microsoft Edge old\n       * Method: POST\n       * URL: https://api.cognitive.microsofttranslator.com/translate?to=${targetLanguage}&api-version=3.0&includeSentenceLength=true\n       * Content-Type: application/json - send(inputText)\n       *\n       * Microsoft Edge 2\n       * Method: POST\n       * URL: https://api-edge.cognitive.microsofttranslator.com/translate?to=${targetLanguage}&api-version=3.0&includeSentenceLength=true\n       * URL: https://api-edge.cognitive.microsofttranslator.com/translate?from=${sourceLanguage}&to=${targetLanguage}&api-version=3.0&includeSentenceLength=true\n       * Authorization: Bearer ${accessToken} - Content-Type: application/json - send(inputText)\n       */\n      return (await $.ajax({\n        data: JSON.stringify(text.split(/\\n/)\n          .map((element) => ({ Text: element }))),\n        dataType: 'json',\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n        url: `https://api-edge.cognitive.microsofttranslator.com/translate?api-version=3.0&from=${from}&to=${to}`,\n      })).map(({ translations: [element] }) => element.text)\n        .join('\\n');\n    } catch (error) {\n      console.error('Bản dịch lỗi:', error);\n      throw error;\n    }\n  }\n}\n\nclass Vietphrase {\n  static SOURCE_LANGUAGES = { zh: 'Tiếng Trung' };\n\n  static TARGET_LANGUAGES = {\n    pinyin: 'Bính âm',\n    sinoVietnamese: 'Hán Việt',\n    vi: 'Vietphrase',\n  };\n\n  static DefaultLanguage = {\n    SOURCE_LANGUAGE: 'zh',\n    TARGET_LANGUAGE: 'vi',\n  };\n\n  TranslationAlgorithms = {\n    PRIORITIZE_LONG_VIETPHRASE_CLUSTERS: '0',\n    TRANSLATE_FROM_LEFT_TO_RIGHT: '1',\n  };\n\n  MultiplicationAlgorithm = {\n    NOT_APPLICABLE: '0',\n    MULTIPLICATION_BY_PRONOUNS: '1',\n    MULTIPLICATION_BY_PRONOUNS_AND_NAMES: '2',\n  };\n\n  constructor(data, translationAlgorithm, multiplicationAlgorithm, isTtvTranslate, useGlossary = false, glossary = {}, prioritizeNameOverVietphraseCheck = false, caseSensitive = false) {\n    this.data = data;\n    this.translationAlgorithm = translationAlgorithm;\n    this.multiplicationAlgorithm = multiplicationAlgorithm;\n    this.isTtvTranslate = isTtvTranslate;\n    this.useGlossary = useGlossary;\n    this.glossary = glossary;\n    this.prioritizeNameOverVietphrase = prioritizeNameOverVietphraseCheck;\n    this.caseSensitive = caseSensitive;\n  }\n\n  static getSourceLanguageName(languageCode) {\n    return Vietphrase.SOURCE_LANGUAGES[languageCode].startsWith('Tiếng ') ? Vietphrase.SOURCE_LANGUAGES[languageCode].match(/Tiếng (.+)/)[1] : Vietphrase.SOURCE_LANGUAGES[languageCode];\n  }\n\n  static getTargetLanguageName(languageCode) {\n    return Vietphrase.TARGET_LANGUAGES[languageCode].startsWith('Tiếng ') ? Vietphrase.TARGET_LANGUAGES[languageCode].match(/Tiếng (.+)/)[1] : Vietphrase.TARGET_LANGUAGES[languageCode];\n  }\n\n  static getMappedSourceLanguageCode(translator) {\n    switch (translator) {\n      case Translators.DEEPL_TRANSLATE: {\n        return 'ZH';\n      }\n      case Translators.GOOGLE_TRANSLATE: {\n        return 'zh-CN';\n      }\n      case Translators.PAPAGO: {\n        return 'zh-CN';\n      }\n      case Translators.MICROSOFT_TRANSLATOR: {\n        return 'zh-Hans';\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static getMappedTargetLanguageCode(translator) {\n    switch (translator) {\n      case Translators.DEEPL_TRANSLATE: {\n        return DeepLTranslate.DefaultLanguage.TARGET_LANG;\n      }\n      default: {\n        return 'vi';\n      }\n    }\n  }\n\n  translateText(sourceLanugage, targetLanguage, inputText) {\n    try {\n      let data = {};\n\n      switch (targetLanguage) {\n        case 'pinyin': {\n          data = this.data.pinyins;\n          break;\n        }\n        case 'sinoVietnamese': {\n          data = this.data.chinesePhienAmWords;\n          break;\n        }\n        case 'vi': {\n          data = this.data.vietphrases;\n          break;\n        }\n        // no default\n      }\n\n      switch (this.translationAlgorithm) {\n        case this.TranslationAlgorithms.TRANSLATE_FROM_LEFT_TO_RIGHT: {\n          return this.translateFromLeftToRight(data, inputText);\n        }\n        default: {\n          return this.translatePrioritizeLongVietphraseClusters(data, inputText);\n        }\n      }\n    } catch (error) {\n      console.error('Bản dịch lỗi:', error);\n      throw error;\n    }\n  }\n\n  translatePrioritizeLongVietphraseClusters(data, inputText) {\n    try {\n      const text = inputText.split(/\\r?\\n/)\n        .map((element) => element.trim())\n        .join('\\n');\n\n      let dataEntries = Object.entries(data)\n        .filter(([first]) => text.includes(first));\n      const glossaryEntries = Object.entries(this.glossary);\n\n      let result = text;\n\n      if (dataEntries.length > 0 || glossaryEntries.length > 0) {\n        const [luatnhanNameEntries, luatnhanPronounEntries] = this.getLuatnhanData(glossaryEntries, text);\n        const maybePrioritizeNameOverVietphrase = this.prioritizeNameOverVietphrase ? luatnhanNameEntries : [...luatnhanNameEntries, ...glossaryEntries];\n\n        dataEntries = [...this.useGlossary ? maybePrioritizeNameOverVietphrase : [], ...luatnhanPronounEntries, ...dataEntries].sort((a, b) => b[0].length - a[0].length);\n\n        dataEntries.some(([key, value], index, array) => {\n          if (!this.isTtvTranslate || /^[\\d\\p{sc=Hani}]+$/u.test(key) || [...luatnhanNameEntries, ...glossaryEntries].indexOf(key) > -1) {\n            result = result.replace(new RegExp(`([\\\\p{Lu}\\\\p{Ll}\\\\p{Nd}])${Utils.getRegexEscapedText(key)}(?=${Object.values(this.glossary).join('|')})`, 'gu'), `$1 ${Utils.getRegexEscapedReplacement(value)} `)\n              .replace(new RegExp(`([\\\\p{Lu}\\\\p{Ll}\\\\p{Nd}])${Utils.getRegexEscapedText(key)}([\\\\p{Lu}\\\\p{Ll}\\\\p{Nd}])`, 'gu'), `$1 ${Utils.getRegexEscapedReplacement(value)} $2`)\n              .replace(new RegExp(`([\\\\p{Lu}\\\\p{Ll}\\\\p{Nd}])${Utils.getRegexEscapedText(key)}`, 'gu'), `$1 ${Utils.getRegexEscapedReplacement(value)}`)\n              .replace(new RegExp(`${Utils.getRegexEscapedText(key)}([\\\\p{Lu}\\\\p{Ll}\\\\p{Nd}])`, 'gu'), `${Utils.getRegexEscapedReplacement(value)} $1`)\n              .replace(new RegExp(`${Utils.getRegexEscapedText(key)}(?=${Object.values(this.glossary).join('|')})`, 'g'), `${Utils.getRegexEscapedReplacement(value)} `)\n              .replace(new RegExp(Utils.getRegexEscapedText(key), 'g'), Utils.getRegexEscapedReplacement(value));\n          }\n\n          if (array.filter(([first]) => result.includes(first)).length === 0) return true;\n          return false;\n        });\n\n        result = this.getCaseSensitive(result);\n      }\n\n      return result;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  translateFromLeftToRight(data, inputText) {\n    try {\n      const text = inputText.split(/\\r?\\n/)\n        .map((element) => element.trim())\n        .join('\\n');\n\n      let dataEntries = Object.entries(data)\n        .filter(([first]) => text.includes(first));\n      const glossaryEntries = Object.entries(this.glossary);\n\n      const lines = text.split(/\\n/);\n      const results = [];\n\n      let result = text;\n\n      if (dataEntries.length > 0 || glossaryEntries.length > 0) {\n        const [luatnhanNameEntries, luatnhanPronounEntries] = this.getLuatnhanData(glossaryEntries, text);\n        const maybePrioritizeNameOverVietphrase = this.prioritizeNameOverVietphrase ? luatnhanNameEntries : [...luatnhanNameEntries, ...glossaryEntries];\n\n        dataEntries = [...this.useGlossary ? maybePrioritizeNameOverVietphrase : [], ...luatnhanPronounEntries, ...dataEntries];\n\n        const dataObj = Object.fromEntries(dataEntries);\n\n        lines.forEach((a) => {\n          const chars = a;\n\n          if (chars.length === 0) {\n            results.push(chars);\n          } else {\n            const glossaryEntriesInLine = glossaryEntries.filter(([, second]) => chars.includes(second));\n\n            const dataLengths = [chars.length, ...this.useGlossary && this.prioritizeNameOverVietphrase ? glossaryEntriesInLine.map(([, second]) => second.length) : [], ...dataEntries.filter(([first]) => chars.includes(first))\n              .map(([first]) => first.length), 1].sort((b, c) => c - b)\n              .filter((element, index, array) => element > 0 && index === array.indexOf(element));\n\n            let tempLine = '';\n            let prevPhrase = '';\n            let i = 0;\n\n            chars.forEach(() => {\n              dataLengths.some((c) => {\n                const phrase = chars.substring(i, i + c);\n\n                if (this.useGlossary && this.prioritizeNameOverVietphrase && glossaryEntries.map(([, second]) => second)\n                  .indexOf(phrase) > -1) {\n                  tempLine += (i > 0 && /[\\p{Lu}\\p{Ll}\\p{Nd}]/u.test(prevPhrase || tempLine[tempLine.length - 1] || '') ? ' ' : '') + phrase;\n                  prevPhrase = phrase;\n                  i += c - 1;\n                  return true;\n                }\n                if ((!this.isTtvTranslate || /^[\\d\\p{sc=Hani}]+$/u.test(phrase) || [...luatnhanNameEntries, ...glossaryEntries].indexOf(phrase) > -1) && Object.prototype.hasOwnProperty.call(dataObj, phrase)) {\n                  if (dataObj[phrase].length > 0) {\n                    tempLine += (i > 0 && /[\\p{Lu}\\p{Ll}\\p{Nd}]/u.test(prevPhrase || tempLine[tempLine.length - 1] || '') ? ' ' : '') + dataObj[phrase];\n                    prevPhrase = dataObj[phrase];\n                  }\n\n                  i += c - 1;\n                  return true;\n                }\n                if (c === 1) {\n                  tempLine += (i > 0 && /[\\p{Lu}\\p{Ll}\\p{Nd}]/u.test(chars[i]) && /[\\p{Lu}\\p{Ll}\\p{Nd}]/u.test(prevPhrase || '') ? ' ' : '') + chars[i];\n                  prevPhrase = '';\n                  return true;\n                }\n\n                return false;\n              });\n\n              i += 1;\n            });\n\n            results.push(tempLine);\n          }\n        });\n\n        result = this.getCaseSensitive(results.join('\\n'));\n      }\n\n      return result;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  getLuatnhanData(glossaryEntries, inputText) {\n    const luatnhanNameEntries = [];\n    const luatnhanPronounEntries = [];\n\n    if (this.multiplicationAlgorithm > this.MultiplicationAlgorithm.NOT_APPLICABLE) {\n      Object.entries(this.data.cacLuatnhan)\n        .forEach(([a, b]) => {\n          if (this.useGlossary && this.multiplicationAlgorithm === this.MultiplicationAlgorithm.MULTIPLICATION_BY_PRONOUNS_AND_NAMES && glossaryEntries.length > 0) {\n            Object.entries(this.glossary)\n              .forEach(([c, d]) => {\n                const entriesKey = a.replace(/\\{0}/g, Utils.getRegexEscapedReplacement(this.prioritizeNameOverVietphrase ? d : c));\n\n                if (inputText.includes(entriesKey)) {\n                  luatnhanNameEntries.push([entriesKey, b.replace(/\\{0}/g, Utils.getRegexEscapedReplacement(d))]);\n                }\n              });\n          }\n\n          Object.entries(this.data.pronouns)\n            .forEach(([c, d]) => {\n              const entriesKey = a.replace(/\\{0}/g, Utils.getRegexEscapedReplacement(c));\n\n              if (inputText.includes(entriesKey)) {\n                luatnhanPronounEntries.push([entriesKey, b.replace(/\\{0}/g, Utils.getRegexEscapedReplacement(d))]);\n              }\n            });\n        });\n    }\n\n    return [luatnhanNameEntries, luatnhanPronounEntries];\n  }\n\n  getCaseSensitive(text) {\n    return text.split(/\\n/)\n      .map((element) => (this.caseSensitive ? element.replace(/(^\\s*|(?:[!.:;?]\\s+|\\s+-\\s+|…\\s*|[。！．：；？]\\s*|['\"\\p{Ps}\\p{Pi}]\\s*))(\\p{Ll})/gu, (match, p1, p2) => p1 + p2.toUpperCase()) : element))\n      .join('\\n');\n  }\n}\n"],"mappings":"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"}